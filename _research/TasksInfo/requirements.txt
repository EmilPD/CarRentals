--== Application Back-end (Server) - up to 40% ==--

1. At least 5 different public dynamic web pages
	- Using Pug														| https://pugjs.org/language/attributes.html
2. At least 3 different private (authenticated) dynamic web pages
	- Using Pug
3. At least 5 different public RESTful routes for AJAX
4. At least 1 private (authenticated) route for AJAX
5. Use Express for the server
	- Use an MV-* pattern
6. Use MongoDB
	- As data storage
	- Do not use Mongoose
7. Create a data/service layer for accessing the database
8. Use Passport - for managing users								| https://github.com/jaredhanson/passport-local
9. Implement WebSockets
	- Using Socket.io or anything else


--== Application front-end (client) - up to 25% ==--

1. Use any framework of your choice for the front-end
	- Optional, not required
	- KendoUI, AngularJS, Angular 2, Knockout, Bootstrap, etc...
2. Implement responsive design
	- It may be based on Bootstrap, Materialize or any other UI framework
3. Use at least one AJAX form and/or WebSockets communication
	- maybe the form on home page - when the user type 3 characters - to make GET request for all cities with typed characters
4. Apply error handling and data validation to avoid crashes when invalid data is entered
	- maybe toastr of similar
5. Use loaders, modals and notifications when applicable 
	- modal from JQuery UI for posting comment
6. Prevent yourself from security holes (XSS, XSRF, Parameter Tampering, etc.)
	- Handle correctly the special HTML characters and tags like <script>, <br />, etc.
7. Create usable UI
	- No need to be pretty, but usable



